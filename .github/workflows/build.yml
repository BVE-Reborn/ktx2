name: Build

on:
  push:
    branches: 
      - trunk
      - ci/**
  pull_request:

jobs:
  build:
    timeout-minutes: 10

    strategy:
      matrix:
        include:
          # wasm stable
          - name: 'stable wasm'
            os: 'ubuntu-latest'
            target: 'wasm32-unknown-unknown'
            rust_version: 'stable'
          
          # native stable
          - name: 'stable linux'
            os: 'ubuntu-latest'
            target: 'x86_64-unknown-linux-gnu'
            rust_version: 'stable'
          - name: 'stable mac'
            os: 'macos-latest'
            target: 'x86_64-apple-darwin'
            rust_version: 'stable'
          - name: 'stable windows'
            os: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            rust_version: 'stable'
          
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_version }}
          target: ${{ matrix.target }}
          profile: minimal
          components: clippy
          default: true

      - name: caching
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.target }}-a # suffix for cache busting
          
      - name: check
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --target ${{ matrix.target }} -- -D warnings 
          
      - name: build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }}
          
      - name: test
        uses: actions-rs/cargo@v1
        with:
          command: test
        if: ${{ matrix.name != 'wasm' }}
          
      - name: doc
        uses: actions-rs/cargo@v1
        env:
          RUSTDOCFLAGS: -D warnings
        with:
          command: doc
          args: --no-deps --target ${{ matrix.target }}

  cargo-fmt:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt
          default: true

      - name: check format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: check denies
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          log-level: warn
          command: check
          arguments: --all-features
